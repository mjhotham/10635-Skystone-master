package org.firstinspires.ftc.teamcode.worlds;

// import java.io.BufferedReader;
// import java.io.FileNotFoundException;
// import java.io.FileReader;
// import java.io.IOException;

import java.util.Scanner;

public class stuff {

//    public double speeds[] = new double[101];
//    public double torques[] = new double[101];
//    public double currents[] = new double[101];
//    public double powerIns[] = new double[101];
//    public double powerOuts[] = new double[101];
//    public double efficiencies[] = new double[101];
//    public double powersDissipated[] = new double[101];

    final static double speeds[] = {0.0, 54.758, 109.515, 164.273, 219.031, 273.788, 328.546, 383.303, 438.061, 492.819, 547.576, 602.334, 657.092, 711.849, 766.607, 821.365, 876.122, 930.88, 985.638, 1040.395, 1095.153, 1149.91, 1204.668, 1259.426, 1314.183, 1368.941, 1423.699, 1478.456, 1533.214, 1587.972, 1642.729, 1697.487, 1752.244, 1807.002, 1861.76, 1916.517, 1971.275, 2026.033, 2080.79, 2135.548, 2190.306, 2245.063, 2299.821, 2354.579, 2409.336, 2464.094, 2518.851, 2573.609, 2628.367, 2683.124, 2737.882, 2792.64, 2847.397, 2902.155, 2956.913, 3011.67, 3066.428, 3121.185, 3175.943, 3230.701, 3285.458, 3340.216, 3394.974, 3449.731, 3504.489, 3559.247, 3614.004, 3668.762, 3723.52, 3778.277, 3833.035, 3887.792, 3942.55, 3997.308, 4052.065, 4106.823, 4161.581, 4216.338, 4271.096, 4325.854, 4380.611, 4435.369, 4490.126, 4544.884, 4599.642, 4654.399, 4709.157, 4763.915, 4818.672, 4873.43, 4928.188, 4982.945, 5037.703, 5092.461, 5147.218, 5201.976, 5256.733, 5311.491, 5366.249, 5421.006, 5475.764};
    final static double torques[] = {0.173, 0.17127, 0.16954, 0.16781, 0.16608, 0.16435, 0.16262, 0.16089, 0.15916, 0.15743, 0.1557, 0.15397, 0.15224, 0.15051, 0.14878, 0.14705, 0.14532, 0.14359, 0.14186, 0.14013, 0.1384, 0.13667, 0.13494, 0.13321, 0.13148, 0.12975, 0.12802, 0.12629, 0.12456, 0.12283, 0.1211, 0.11937, 0.11764, 0.11591, 0.11418, 0.11245, 0.11072, 0.10899, 0.10726, 0.10553, 0.1038, 0.10207, 0.10034, 0.09861, 0.09688, 0.09515, 0.09342, 0.09169, 0.08996, 0.08823, 0.0865, 0.08477, 0.08304, 0.08131, 0.07958, 0.07785, 0.07612, 0.07439, 0.07266, 0.07093, 0.0692, 0.06747, 0.06574, 0.06401, 0.06228, 0.06055, 0.05882, 0.05709, 0.05536, 0.05363, 0.0519, 0.05017, 0.04844, 0.04671, 0.04498, 0.04325, 0.04152, 0.03979, 0.03806, 0.03633, 0.0346, 0.03287, 0.03114, 0.02941, 0.02768, 0.02595, 0.02422, 0.02249, 0.02076, 0.01903, 0.0173, 0.01557, 0.01384, 0.01211, 0.01038, 0.00865, 0.00692, 0.00519, 0.00346, 0.00173, 0.0};
    final static double currents[] = {9.801, 9.707, 9.612, 9.518, 9.423, 9.329, 9.234, 9.14, 9.045, 8.951, 8.856, 8.762, 8.667, 8.573, 8.479, 8.384, 8.29, 8.195, 8.101, 8.006, 7.912, 7.817, 7.723, 7.628, 7.534, 7.44, 7.345, 7.251, 7.156, 7.062, 6.967, 6.873, 6.778, 6.684, 6.589, 6.495, 6.4, 6.306, 6.212, 6.117, 6.023, 5.928, 5.834, 5.739, 5.645, 5.55, 5.456, 5.361, 5.267, 5.172, 5.078, 4.984, 4.889, 4.795, 4.7, 4.606, 4.511, 4.417, 4.322, 4.228, 4.133, 4.039, 3.944, 3.85, 3.756, 3.661, 3.567, 3.472, 3.378, 3.283, 3.189, 3.094, 3.0, 2.905, 2.811, 2.717, 2.622, 2.528, 2.433, 2.339, 2.244, 2.15, 2.055, 1.961, 1.866, 1.772, 1.677, 1.583, 1.489, 1.394, 1.3, 1.205, 1.111, 1.016, 0.922, 0.827, 0.733, 0.638, 0.544, 0.449, 0.355};
    final static double powerIns[] = {117.612, 116.484, 115.344, 114.216, 113.076, 111.948, 110.808, 109.68, 108.54, 107.412, 106.272, 105.144, 104.004, 102.876, 101.748, 100.608, 99.48, 98.34, 97.212, 96.072, 94.944, 93.804, 92.676, 91.536, 90.408, 89.28, 88.14, 87.012, 85.872, 84.744, 83.604, 82.476, 81.336, 80.208, 79.068, 77.94, 76.8, 75.672, 74.544, 73.404, 72.276, 71.136, 70.008, 68.868, 67.74, 66.6, 65.472, 64.332, 63.204, 62.064, 60.936, 59.808, 58.668, 57.54, 56.4, 55.272, 54.132, 53.004, 51.864, 50.736, 49.596, 48.468, 47.328, 46.2, 45.072, 43.932, 42.804, 41.664, 40.536, 39.396, 38.268, 37.128, 36.0, 34.86, 33.732, 32.604, 31.464, 30.336, 29.196, 28.068, 26.928, 25.8, 24.66, 23.532, 22.392, 21.264, 20.124, 18.996, 17.868, 16.728, 15.6, 14.46, 13.332, 12.192, 11.064, 9.924, 8.796, 7.656, 6.528, 5.388, 4.26};
    final static double powerOuts[] = {0.0, 0.982, 1.944, 2.887, 3.809, 4.712, 5.595, 6.458, 7.301, 8.125, 8.928, 9.712, 10.476, 11.22, 11.944, 12.648, 13.333, 13.997, 14.642, 15.267, 15.872, 16.458, 17.023, 17.569, 18.094, 18.6, 19.086, 19.553, 19.999, 20.426, 20.832, 21.219, 21.586, 21.934, 22.261, 22.568, 22.856, 23.124, 23.372, 23.6, 23.808, 23.997, 24.166, 24.314, 24.443, 24.552, 24.642, 24.711, 24.761, 24.791, 24.8, 24.791, 24.761, 24.711, 24.642, 24.552, 24.443, 24.314, 24.166, 23.997, 23.808, 23.6, 23.372, 23.124, 22.856, 22.568, 22.261, 21.934, 21.586, 21.219, 20.832, 20.426, 19.999, 19.553, 19.086, 18.6, 18.094, 17.569, 17.023, 16.458, 15.872, 15.267, 14.642, 13.997, 13.333, 12.648, 11.944, 11.22, 10.476, 9.712, 8.928, 8.125, 7.301, 6.458, 5.595, 4.712, 3.809, 2.887, 1.944, 0.982, 0.0};
    final static double efficiencies[] = {0.0, 0.843, 1.685, 2.528, 3.369, 4.209, 5.049, 5.888, 6.727, 7.564, 8.401, 9.237, 10.073, 10.906, 11.739, 12.572, 13.403, 14.233, 15.062, 15.891, 16.717, 17.545, 18.368, 19.194, 20.014, 20.833, 21.654, 22.472, 23.289, 24.103, 24.917, 25.727, 26.539, 27.346, 28.154, 28.956, 29.76, 30.558, 31.353, 32.151, 32.94, 33.734, 34.519, 35.305, 36.084, 36.865, 37.637, 38.412, 39.176, 39.944, 40.698, 41.451, 42.205, 42.946, 43.691, 44.42, 45.154, 45.872, 46.595, 47.298, 48.004, 48.692, 49.383, 50.052, 50.71, 51.37, 52.007, 52.645, 53.251, 53.861, 54.437, 55.015, 55.553, 56.09, 56.581, 57.048, 57.507, 57.915, 58.306, 58.636, 58.942, 59.174, 59.376, 59.481, 59.544, 59.481, 59.352, 59.065, 58.63, 58.058, 57.231, 56.189, 54.763, 52.969, 50.569, 47.481, 43.304, 37.709, 29.779, 18.226, 0.0};
    final static double powersDissipated[] = {117.612, 115.502, 113.4, 111.329, 109.267, 107.236, 105.213, 103.222, 101.239, 99.287, 97.344, 95.432, 93.528, 91.656, 89.804, 87.96, 86.147, 84.343, 82.57, 80.805, 79.072, 77.346, 75.653, 73.967, 72.314, 70.68, 69.054, 67.459, 65.873, 64.318, 62.772, 61.257, 59.75, 58.274, 56.807, 55.372, 53.944, 52.548, 51.172, 49.804, 48.468, 47.139, 45.842, 44.554, 43.297, 42.048, 40.83, 39.621, 38.443, 37.273, 36.136, 35.017, 33.907, 32.829, 31.758, 30.72, 29.689, 28.69, 27.698, 26.739, 25.788, 24.868, 23.956, 23.076, 22.216, 21.364, 20.543, 19.73, 18.95, 18.177, 17.436, 16.702, 16.001, 15.307, 14.646, 14.004, 13.37, 12.767, 12.173, 11.61, 11.056, 10.533, 10.018, 9.535, 9.059, 8.616, 8.18, 7.776, 7.392, 7.016, 6.672, 6.335, 6.031, 5.734, 5.469, 5.212, 4.987, 4.769, 4.584, 4.406, 4.26};


//    public stuff() {
//        BufferedReader csvReader = null;
//        try {
//            csvReader = new BufferedReader(new FileReader("NeveRest-motor-curve-data-20171016.csv"));
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        }
//        String row;
//        boolean firstTime = true;
//
//        double speed, torque, current, powerIn, powerOut, efficiency, powerDissipated;
//
//
//        int i = 0;
//        while (true) {
//            try {
//                if (!((row = csvReader.readLine()) != null)) break;
//                String[] data = row.split(",");
//                // do something with the data
////                for (String o : data) {
////                    System.out.print(o + "\t");
////                }
////                System.out.println();
//
//                if (firstTime) {
//                    firstTime = false;
//                } else {
//                    speed = Double.parseDouble(data[0]);
//                    torque = Double.parseDouble(data[1]);
//                    current = Double.parseDouble(data[2]);
//                    powerIn = Double.parseDouble(data[3]);
//                    powerOut = Double.parseDouble(data[4]);
//                    efficiency = Double.parseDouble(data[5]);
//                    powerDissipated = Double.parseDouble(data[6]);
//                    speeds[i] = speed;
//                    torques[i] = torque;
//                    currents[i] = current;
//                    powerIns[i] = powerIn;
//                    powerOuts[i] = powerOut;
//                    efficiencies[i] = efficiency;
//                    powersDissipated[i] = powerDissipated;
//                    i++;
//                    //more maths here
//                }
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        }
//        try {
//            csvReader.close();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//
////
////        for (double o : speeds)
////            System.out.print(o + ", ");
////        System.out.println();
////
////        for (double o : torques)
////            System.out.print(o + ", ");
////        System.out.println();
////
////        for (double o : currents)
////            System.out.print(o + ", ");
////        System.out.println();
////
////        for (double o : powers)
////            System.out.print(o + ", ");
////        System.out.println();
////
////        for (double o : currents)
////            System.out.print(o + ", ");
////        System.out.println();
////
////        for (double o : powerIns)
////            System.out.print(o + ", ");
////        System.out.println();
////
////        for (double o : powerOuts)
////            System.out.print(o + ", ");
////        System.out.println();
////
////        for (double o : efficiencies)
////            System.out.print(o + ", ");
////        System.out.println();
////
////        for (double o : powers)
////            System.out.print(o + ", ");
////        System.out.println();
//    }

    public static int choose(double n, double x1, double x2, int y1, int y2) {
        return Math.abs(n - x1) < Math.abs(n - x2) ? y1 : y2;
    }

    public static int getIndex(double input) {
        input *= 1.0;
        double[] inputs = speeds;

        if (input <= inputs[0])
            return 0;
        else if (input > inputs[inputs.length - 1])
            return inputs.length - 1;

        int index = 0;
        for (; index < inputs.length; index++)
            if (input < inputs[index])
                break;

        return choose(input, inputs[index - 1], inputs[index], index - 1, index);
    }

    public static String stringify(int index) {
        return String.format("Speed: %f, Torque: %f, Current: %f, Power In: %f, Power Out: %f, Efficiency: %f, Power Dissipated: %f",
                speeds[index], torques[index], currents[index], powerIns[index], powerOuts[index], efficiencies[index], powersDissipated[index]);
    }

    public static String getData(double input) {
        return stringify(getIndex(input));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println(getData(sc.nextDouble()));
        }
    }
}
